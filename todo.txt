HIGH
---------
- memory: fucking proxy allocator needs a solid review and clean up
            there are still situations where other allocators backed by
            a proxy aren't aligned with total_allocated
- cxx kernel: finish wrapping
- scm: build intervals of liveliness for virtual variables
- scm: first pass register allocator
- scm: write, display, print, ports
    * should these all be kernel functions?  the number of built-in
      primitives continues to grow.

MEDIUM
---------
- rename hashtab_t to oa_hashtab_t and set_t to oa_set_t
    * add ca_hashtab_t and ca_set_t using chaining via linked list?
- review and improve symtab_t if possible
- filesys: implement glob function, which will also touch the init and fini functions for the
            filesys module.
- filesys: need to open and read the xdg config file (if found) and put into a symtab_t or hashtab_t.
            also, need to read applicable env vars once at module init and put them into the
            same symtab_t/hashtab_t.
- filesys: once meta data is done (previous task), implement the remaining places::* functions
- libgfx: create test bed application within foundation project

LOW
---------
- abstract: shared memory buffer between processes
- ipc: create an ipc module for low-level base
    ipc_addr_t, ipc_transport_t, ipc_

- page allocator: implement free list so pages can recycle
- page allocator/slab allocator: implement reserve function so n numbers of pages can be allocated at a time.
        this would replace passing num_pages into these up front and makes the interface (perhaps) more consistent
        with other mechanisms in the library.

- libgfx: pull in nfd or rewrite based on nfd_extended

DONE
----
- scm: added basic kernel module
- scm: load kernel function
- symtab: just ran into a pointer stability issue.  i swapped in
          stable_array_t easily enough, but now i want do a full review
          and see if the stable array is really needed.
    * i swapped back to standard array_t.  the issue appeared to be
      me being too aggressive in removing the range check in GET_NODE.
- config: rework kernel funcs to take advantage of ffi based
          callback mechanism.
- config: review and clean up
- config: use memory mapped buf_t for .scm files
- config: remove cvar: prefix on variable names
    * changed to classic lisp/scheme global variable name, e.g. *product_name*
- scm: enhance native func support to accept an ffi_t*
        and dynamically invoke it.
- scm: implement tail call optimization
    * there are few items still not optimized but the groundwork
      is now in place.  need to dig into do_list again to see if i can
      get it reworked effectively.
- scm: add full quasiquote, unquote, unquote-splicing primitive support
- bag_t: set + counts
- getopts: finish this!
- wasm decoder
- leb_128_t: implement this type
- hashtab_t: implement basic forward-only iterator
- hashtab_t/set_t: decide how to handle bucket state flag
    * repurposed the minimal amount of bitset logic needed
- hashtab_t: fix load_factor
- set_t: fix load_factor
- intern_t: fix load_factor
- set_t: implement basic forward-only iterator
- scm: implement eval primitive
- add digraph_t
- buddy allocator
- rework graphviz api
- buf: create a Buffer_Concept and rework buf to be based on it
- buf: pretty formatting for source errors
- term: module for ANSI output to terminals
- locale: localized strings
- path: implement replace_extension function
- path: implement stem function, which returns the file name without the extension
- add bintree_t
- memory: create a public api which returns a tree structure of allocators that tools like a UI can
        invoke and create a display of allocators in a hierarchy
- add queue_t
- audit: stack_t
- fix: set_t functionality finalized & tested
- fix: symtab_t appears to be increasing the size member more often than it should so the count of
        a symtab_t is off-by-n (where n is usually <= 5) compared to a hashtab_t.
- fix: symtab_t remove needs to be rewritten to recursively visit each prefix
- ffi module
- path & filesys modules
- use new path module to grab the process filename from argv[0] in the default log system
- network
- logging
- add set_t
- add linked_list_t
- integrate iterator macros
- symtab_t: make pairs function a prefix search, defaulting to everything
- bit functions
- replace intern pool + hashtable in proxy_system
- implement symtab::find and symtab::remove
- test a few different slab size configs
- change slab system to allow config for number of pages allocated for
    each slab.  default should be 1 page.
- change stable_array and symtab to support passing in number of pages
    default is 1 page.
- slab::reset function
- symtab::reset should mark all nodes empty, free values

